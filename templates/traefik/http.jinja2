{% import "traefik/common.jinja2" as common with context -%}

{#
    IN:
        name: string
        entrypoints: string[]
#}
{% macro __enable(name, entrypoints) %}
{% if entrypoints is not defined %}
{% set entrypoints = [ 'websecure' ] %}
{% endif %}
- "traefik.http.routers.{{ name }}.entrypoints={{ entrypoints|join(',') }}"
- "traefik.http.routers.{{ name }}.tls=true"
{% endmacro %}

{#
    IN:
        name: string
        entrypoints: string[]
#}
{% macro enable(name, entrypoints) %}
{{ common.enable(name) }}
{{ __enable(name, entrypoints) }}
{% endmacro %}

{#
    IN:
        name: string
#}
{% macro use_letsencrypt(name) %}
{% if not is_dev %}
{##}- "traefik.http.routers.{{ name }}.tls.certresolver={{ letsencrypt_resolver_name }}"
{% endif %}
{% endmacro %}

{#
    IN:
        host: string
        name: string
        path: string
#}
{% macro add_route(host, name, path) %}
- "traefik.http.routers.{{ name }}.rule=Host(`{{ host }}`) && PathPrefix(`{{ path }}`)"
{% endmacro %}

{#
    IN:
        host: string
        expression: string
#}
{% macro add_custom_route(name, expression) %}
- "traefik.http.routers.{{ name }}.rule={{ expression }}"
{% endmacro %}

{#
    IN:
        name: string
        port: number
#}
{% macro service_port(name, port) %}
- "traefik.http.services.{{ name }}.loadbalancer.server.port={{ port }}"
{% endmacro %}

{#
    IN:
        name: string
        ips: string[]
#}
{% macro whitelist_ip_range(name, ips)%}
- "traefik.http.middlewares.{{ name }}.ipwhitelist.sourcerange={{ ips|join(',') }}"
{% endmacro %}

{# ########################################################################## #}
{# ########################################################################## #}

{% macro __get_fqdn_mw_name(service_name, mw_name) %}{{ service_name }}-{{ mw_name }}{% endmacro %}

{% set auth = { 'absolute_name': 'authelia' } %}

{#
  https://doc.traefik.io/traefik/middlewares/basicauth/

  args: {
    users: string
  }
#}
{% macro __basic_auth_f(name, args) %}
- "traefik.http.middlewares.{{ name }}.basicauth.users={{ args.users|replace('$', '$$') }}"
{% endmacro %}
{% set basic_auth = { 'name': 'basic-auth', 'f': __basic_auth_f } %}

{#
  args: {}
#}
{% macro __add_trailing_slash_f(name, args) %}
- "traefik.http.middlewares.{{ name }}.redirectregex.regex=^(https?://[^/]+/[a-z0-9_]+)$$"
- "traefik.http.middlewares.{{ name }}.redirectregex.replacement=$${1}/"
- "traefik.http.middlewares.{{ name }}.redirectregex.permanent=true"
{% endmacro %}
{% set trailing_slash = { 'name': 'add-trailing-slash', 'f': __add_trailing_slash_f } %}


{#
  args: {
    path: string
  }
#}
{% macro __strip_path_f(name, args) %}
- "traefik.http.middlewares.{{ name }}.stripprefix.prefixes={{ args.path }}"
- "traefik.http.middlewares.{{ name }}.stripprefix.forceslash=true"
{% endmacro %}
{% set strip_path = { 'name': 'strip-path', 'f': __strip_path_f } %}


{#
  args: {
    old_path: string
    new_path: string
  }
#}
{% macro __add_redirect_f(name, args) %}
- "traefik.http.middlewares.{{ name }}.redirectregex.regex=^(.*){{ args.old_path }}/?$$"
- "traefik.http.middlewares.{{ name }}.redirectregex.replacement=$${1}{{ args.new_path }}"
- "traefik.http.middlewares.{{ name }}.redirectregex.permanent=true"
{% endmacro %}
{% set redirect = { 'name': 'redirect', 'f': __add_redirect_f } %}

{#
  args: {}
#}
{% macro __fix_wss_f(name, args) %}
- "traefik.http.middlewares.{{ name }}.headers.customrequestheaders.X-Forwarded-Proto=https"
{% endmacro %}
{% set fix_wss = { 'name': 'fix-wss', 'f': __fix_wss_f } %}

{#
  args: {
    path: string
  }
#}
{% macro __replace_path_f(name, args) %}
- "traefik.http.middlewares.{{ name }}.replacepath.path={{ args.path }}"
{% endmacro %}
{% set replace_path = { 'name': 'replace_path', 'f': __replace_path_f } %}

{#
  args: {
    regex: string
    replacement: string
  }
#}
{% macro __replace_path_regex_f(name, args) %}
- "traefik.http.middlewares.{{ name }}.replacepathregex.regex={{ args.regex|replace('$', '$$') }}"
- "traefik.http.middlewares.{{ name }}.replacepathregex.replacement={{ args.replacement|replace('$', '$$') }}"
{% endmacro %}
{% set replace_path_regex = { 'name': 'replace_path_regex', 'f': __replace_path_regex_f } %}

{#
  args: {
    methods: string
    originlist: string
    allowheaders: string
  }
#}
{% macro __add_cors_f(name, args) %}
- "traefik.http.middlewares.{{ name }}.headers.accesscontrolallowmethods={{ args.methods }}"
- "traefik.http.middlewares.{{ name }}.headers.accesscontrolalloworiginlist={{ args.originlist }}"
{% if args.allowheaders is defined %}
- "traefik.http.middlewares.{{ name }}.headers.accesscontrolallowheaders={{ args.allowheaders }}"
{% endif %}
{% endmacro %}
{% set add_cors = { 'name': 'add_cors', 'f': __add_cors_f } %}

{# ########################################################################## #}
{# ########################################################################## #}

{#
    IN:
        service_name: string,
        items: {
          mw: {
            name: string,
            f: (name: string, args: any) => string
          },
          args: any
        }[]
#}
{% macro add_middlewares(service_name, items) %}
{% set mw_strs = [] %}
{% for item in items %}
{##}{% if item.mw.absolute_name is defined %}
{####}{% set x = mw_strs.append(item.mw.absolute_name + '@docker') %}
{##}{% else %}
{####}{% set x = mw_strs.append(service_name + '-' + item.mw.name + '@docker') %}
{####}{{ item.mw.f(__get_fqdn_mw_name(service_name, item.mw.name), item.args) }}
{##}{% endif %}
{% endfor %}
- "traefik.http.routers.{{ service_name }}.middlewares={{ mw_strs|join(',') }}"
{% endmacro %}

{# ########################################################################## #}
{# ########################################################################## #}

{% set minimal_middlewares_no_auth = [
    {
      'mw': trailing_slash,
      'args': {}
    },
    {
      'mw': fix_wss,
      'args': {}
    }
] %}

{% set minimal_middlewares = [
    {
      'mw': auth
    }
] + minimal_middlewares_no_auth %}

{# ########################################################################## #}
{# ########################################################################## #}

{#
    IN:
        service_name: string
        path: string
        port: number
#}
{% macro declare_labels_mount_path_internal(service_name, path, port, middlewares) %}
{{ declare_labels_mount_path(dns.internal.root, service_name, path, port, middlewares) }}
  {{ whitelist_ip_range(service_name, [ '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16' ]) }}
{% endmacro %}

{#
    IN:
        service_name: string
        path: string
        port: number
#}
{% macro declare_labels_mount_path_public(service_name, path, port, middlewares) %}
{{ declare_labels_mount_path(dns.public.root, service_name, path, port, middlewares) }}
  {{ use_letsencrypt(service_name) }}
{% endmacro %}

{#
    IN:
        host: string
        service_name: string
        path: string
        port: number
#}
{% macro add_more_labels_mount_path(host, service_name, path, port, middlewares, entrypoints) %}
{{ __enable(service_name, entrypoints) }}
{% if port is defined %}
{###}{{ service_port(service_name, port) }}
{% endif %}
{{ add_route(host, service_name, path) }}
- "traefik.http.routers.{{ service_name }}.service={{ service_name }}"
{{ add_middlewares(service_name, middlewares) }}
{% endmacro %}

{#
    IN:
        host: string
        service_name: string
        path: string
        port: number
#}
{% macro declare_labels_mount_path(host, service_name, path, port, middlewares, entrypoints) %}
{% if middlewares is not defined %}{#
#}{% set middlewares =
    minimal_middlewares
      + [
          {
            'mw': strip_path,
            'args': { 'path': path }
          },
        ]
%}
{% endif %}{#

#}{% macro labels() %}
{{ common.enable(name) }}
{{ add_more_labels_mount_path(host, service_name, path, port, middlewares, entrypoints) }}
{% endmacro %}{#
#}
labels:
  {{ labels()|indent(width = 2) }}
{% endmacro %}
