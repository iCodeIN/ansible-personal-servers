{% import 'docker/volumes.jinja2' as dv with context -%}
{% import 'docker/network.jinja2' as dn with context -%}
{% import 'docker/misc.jinja2' as dm with context -%}
{% import 'docker/swarm.jinja2' as ds with context -%}
{% import 'traefik/http.jinja2' as tf with context -%}

{% set vols_traefik = [
  traefik.volumes.dynamic_conf,
  traefik.volumes.certificates
] %}

{% set vols_authelia = [
  authelia.volumes.config,
  authelia.volumes.data
] %}

version: "3.3"
services:
  traefik:
    image: traefik:latest
    command:
      - "--log.level={{ 'INFO' if is_dev else  'WARN' }}"
      - "--accesslog=true"

      - "--providers.docker=true"
      #- "--providers.docker.endpoint=tcp://127.0.0.1:2377"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.network={{ network_names.discovery }}"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory={{ traefik.volumes.dynamic_conf.mount }}"

      - "--api.insecure=true"
      - "--api.dashboard=true"

      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
{#    - "--entrypoints.matrix_alt.address=:8448" #}
{#    - "--entryPoints.among_us.address=:22023/udp" #}
{#    - "--entryPoints.openvpn_tcp.address=:1194" #}
      - "--entryPoints.openvpn_udp.address=:1194/udp"
      - "--entryPoints.dns_tcp.address=:53"
      - "--entryPoints.dns_udp.address=:53/udp"

      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"

      - "--metrics.influxdb=true"
      - "--metrics.influxdb.address=influxdb:8086"
      - "--metrics.influxdb.protocol=http"
      - "--metrics.influxdb.database=traefik"
      - "--metrics.influxdb.addEntryPointsLabels=true"
      - "--metrics.influxdb.addServicesLabels=true"

{% if not is_dev %}
      # Let's Encrypt
      # https://docs.traefik.io/https/acme/
      - "--certificatesresolvers.{{ traefik.lets_encrypt.resolver_name }}.acme.email={{ traefik.lets_encrypt.email }}"
      - "--certificatesresolvers.{{ traefik.lets_encrypt.resolver_name }}.acme.storage={{ traefik.volumes.certificates.mount }}/acme.json"

      # https://docs.traefik.io/https/acme/#httpchallenge
      - "--certificatesresolvers.{{ traefik.lets_encrypt.resolver_name }}.acme.httpchallenge.entrypoint=web"
{#

      # https://docs.traefik.io/https/acme/#dnschallenge
      # if noip implements this, I can switch
      - "--certificatesresolvers.{{ traefik.lets_encrypt.resolver_name }}.acme.dnschallenge.provider=digitalocean"
      - "--certificatesresolvers.{{ traefik.lets_encrypt.resolver_name }}.acme.dnschallenge.delaybeforecheck=0"
#}
{% endif %}
{#
        (8448,),
        (22023,'udp'),
#}
    {{ dn.map_ports([
        (80,), (443,),
        (8080,),
        (1194,'udp'),
        (53,'tcp'), (53,'udp') ])|indent(width = 4) }}
    {{ dv.volumes_section_complete(vols_traefik)|indent(width = 4) }}
      {{ dv.mount_docker_socket() }}
    {{ ds.deploy_section()|indent(width = 4) }}
      placement:
        constraints:
          - "node.role==manager"
    networks:
      - default
      - {{ network_names.discovery }}
      - {{ network_names.datastore }}
    extra_hosts:
      # https://docs.traefik.io/providers/docker/#host-networking
      - "host.docker.internal:172.17.0.1"

{% set service_name = "authelia" %}
  authelia:
    image: authelia/authelia
    user: "1000:1000"
    {{ dv.volumes_section_complete(vols_authelia)|indent(width = 4) }}
    environment:
      TZ: {{ timezone }}
    networks:
      {{ network_names.discovery }}:
    {{ ds.deploy_section()|indent(width = 4) }}
      labels:
        {{ tf.enable(service_name)|indent(width = 6) }}
        {{ tf.use_letsencrypt(service_name) }}
        {{ tf.service_port(service_name, 9091) }}
        - "traefik.http.routers.{{ service_name }}.rule=Host(`{{ dns_sub_domains.login }}`)"

        - "traefik.http.middlewares.{{ service_name }}.forwardauth.address=http://authelia:9091/api/verify?rd=https://{{ dns_sub_domains.login }}/"
        - "traefik.http.middlewares.{{ service_name }}.forwardauth.trustForwardHeader=true"
        - "traefik.http.middlewares.{{ service_name }}.forwardauth.authResponseHeaders=Remote-User,Remote-Groups,X-Forwarded-User"

{{ dn.networks_declaration([ discovery_network, datastore_network ]) }}

{{ dv.volumes_declaration(vols_traefik + vols_authelia) }}
