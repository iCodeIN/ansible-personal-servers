{% import 'docker/volumes.jinja2' as dv with context -%}
{% import 'docker/network.jinja2' as dn with context -%}
{% import 'docker/misc.jinja2' as dm with context -%}

{% set vols_influxdb = [ influxdb_volumes_data ] %}
{% set vols_chronograf = [ chronograf_volumes_data ] %}
{% set vols_kapacitor = [ kapacitor_volumes_data ] %}
{% set vols_grafana = [ grafana_volumes_data ] %}
{% set vols_registry = [ registry_volumes_data, registry_volumes_certificates ] %}
{% set vols_redis = [ redis_volumes_data ] %}
{% set vols_prometheus = [ prometheus_volumes_data ] %}

version: "3"
services:
  {#postgresql:
    image: postgres
    container_name: postgres
    {{ dv.volumes_section_complete()|indent(width = 4) }}
    {{ dn.map_ports([ (5432,) ])|indent(width = 4) }}
    networks:
      - {{ network_names_datastore }}
    {{ dm.common()|indent(width = 4) }}#}

  redis:
    image: redis:latest
    container_name: redis
    command: [ "redis-server", "--appendonly", "yes" ]
    {{ dv.volumes_section_complete(vols_redis)|indent(width = 4) }}
    networks:
      {{ network_names_datastore }}:
    {{ dm.common()|indent(width = 4) }}

  prometheus:
    image: quay.io/prometheus/prometheus:latest
    {{ lookup('traefik', { 'service_name': 'prometheus', 'domain': dns_sub_domains_prometheus,  'port': 9090, 'use_dns_root': True })|indent(width = 4) }}
    {{ dv.volumes_section_complete(vols_prometheus)|indent(width = 4) }}
      - {{ root_dirs_datastore }}/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      {{ network_names_datastore }}:
    {{ dm.common()|indent(width = 4) }}

################################################################################
################################################################################

  docker_registry:
    image: registry:2
    user: "{{ registry_user }}:{{ registry_user }}"
    environment:
      REGISTRY_HTTP_TLS_CERTIFICATE: {{ registry_volumes_certificates.mount }}/registry.crt
      REGISTRY_HTTP_TLS_KEY: {{ registry_volumes_certificates.mount }}/registry.key
    {{ dn.map_ports([ (5000,) ])|indent(width = 4) }}
    {{ dv.volumes_section_complete(vols_registry)|indent(width = 4) }}
      - {{ root_dirs_datastore }}/registry_config.yml:/etc/docker/registry/config.yml:ro
    networks:
      {{ network_names_datastore }}:
    {{ dm.common()|indent(width = 4) }}

  docker_registry_ui:
    image: joxit/docker-registry-ui:{{ 'latest' if is_dev else 'arm64v8' }}
    environment:
      REGISTRY_URL: https://{{ private_docker_registry }}
    {{ lookup('traefik', { 'domain': dns_internal_root, 'service_name': 'docker_registry_ui', 'path': '/registry' })|indent(width = 4) }}
    networks:
      - {{ network_names_discovery }}

################################################################################
################################################################################

  telegraf:
    image: telegraf
    container_name: telegraf
    {{ dv.volumes_section_complete()|indent(width = 4) }}
      - {{ root_dirs_datastore }}/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - {{ root_dirs_datastore }}/gather_stats.sh:/opt/gather_stats.sh:ro
      {{ dv.mount_docker_socket() }}
    # syslog
    {{ dn.map_ports([ (6518, 6514, "udp") ])|indent(width = 4) }}
    networks:
      {{ network_names_datastore }}:
    {{ dm.common()|indent(width = 4) }}

  influxdb:
    image: influxdb
    container_name: influxdb
    {{ dv.volumes_section_complete(vols_influxdb)|indent(width = 4) }}
      - {{ root_dirs_datastore }}/influxdb.conf:/etc/influxdb/influxdb.conf:ro
    {{ dn.map_ports([ (8086,) ])|indent(width = 4) }}
    networks:
      {{ network_names_datastore }}:
    {{ dm.common()|indent(width = 4) }}

  chronograf:
    image: chronograf
    container_name: chronograf
    environment:
      INFLUXDB_URL: http://influxdb:8086
      KAPACITOR_URL: http://kapacitor:9092
      BASE_PATH: /chronograf
    {{ lookup('traefik', { 'service_name': 'chronograf', 'port': 8888 })|indent(width = 4) }}
    {{ dv.volumes_section_complete(vols_chronograf)|indent(width = 4) }}
{% if is_dev %}
    {{ dn.map_ports([ (8888,) ])|indent(width = 4) }}
{% endif %}
    networks:
      - {{ network_names_discovery }}
      - {{ network_names_datastore }}
    {{ dm.common()|indent(width = 4) }}

  kapacitor:
    image: kapacitor
    container_name: kapacitor
    {{ dv.volumes_section_complete(vols_kapacitor)|indent(width = 4) }}
      - {{ root_dirs_datastore }}/kapacitor.conf:/etc/kapacitor/kapacitor.conf:ro
    networks:
      - {{ network_names_datastore }}
    {{ dm.common()|indent(width = 4) }}

################################################################################
################################################################################

  grafana:
    image: grafana/grafana
    container_name: grafana
    {{ lookup('traefik', { 'service_name': 'grafana', 'port': 3000 })|indent(width = 4) }}
    {{ dv.volumes_section_complete(vols_grafana)|indent(width = 4) }}
      - {{ root_dirs_datastore }}/grafana.ini:/etc/grafana/grafana.ini:ro
      - {{ root_dirs_datastore }}/syslog-interceptor-config.yml:/etc/grafana/grafana.ini:ro
{% if is_dev %}
    {{ dn.map_ports([ (3000,) ])|indent(width = 4) }}
{% endif %}
    networks:
      - {{ network_names_discovery }}
      - {{ network_names_datastore }}
    {{ dm.common()|indent(width = 4) }}

################################################################################
################################################################################

  syslog_interceptor:
    image: {{ dm.private_image('syslog_interceptor') }}
    container_name: syslog_interceptor
    {{ dm.journald_logging()|indent(width = 4) }}
    {{ dm.disable_auto_update_section()|indent(width = 4) }}
    {{ dv.volumes_section_complete()|indent(width = 4) }}
      - {{ root_dirs_datastore }}/syslog-interceptor-config.yml:{{ syslog_interceptor_container_app_dir }}/config.yml:ro
    {{ dn.map_ports([ (6514, "udp") ])|indent(width = 4) }}
    networks:
      - {{ network_names_datastore }}
    {{ dm.common()|indent(width = 4) }}

################################################################################
################################################################################

{{ dn.networks_declaration([ discovery_network, datastore_network ]) }}

{{ dv.volumes_declaration(vols_influxdb +
                          vols_chronograf +
                          vols_kapacitor +
                          vols_grafana +
                          vols_registry +
                          vols_redis +
                          vols_prometheus) }}
