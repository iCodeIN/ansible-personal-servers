- block:
  - name: Create datastore network
    include_tasks: containers/network/add_network.yml
    vars:
      network: "{{ datastore_networks }}"
  tags: docker_network

- block:
    - include_tasks: standard_service.yml
      vars:
        root_dir:
          path: "{{ root_dirs_datastore }}"
          user: "{{ user }}"
        dirs:
          - path: "{{ influxdb_volumes_data.local_folder }}"
            user: "{{ user }}"

          - path: "{{ chronograf_volumes_data.local_folder }}"
            user: "{{ user }}"

          - path: "{{ kapacitor_volumes_data.local_folder }}"
            user: "{{ user }}"

          - path: "{{ grafana_volumes_data.local_folder }}"
            user: "{{ user }}"

          - path: "{{ grafana_db_volumes_data.local_folder }}"
            user: "{{ grafana_db_container_user }}"
            group: "{{ grafana_db_container_group }}"

          - path: "{{ registry_volumes_data.local_folder }}"
            user: "{{ registry_user }}"

          - path: "{{ registry_volumes_certificates.local_folder }}"
            user: "{{ registry_user }}"

          - path: "{{ redis_volumes_data.local_folder }}"
            user: "{{ redis_user }}"

          - path: "{{ prometheus_volumes_data.local_folder }}"
            user: "{{ prometheus_user }}"
            group: "{{ user }}"

          - path: "{{ vector_volumes_data.local_folder }}"
            user: "{{ user }}"
            group: "{{ user }}"

          - path: "{{ vector_volumes_scripts.local_folder }}"
            user: "{{ user }}"
            group: "{{ user }}"

          - path: "{{ loki_volumes_data.local_folder }}"
            user: "10001"
            group: "10001"

          - path: "{{ loki_volumes_wal.local_folder }}"
            user: "10001"
            group: "10001"

          - path: "{{ fluent_bit_volumes_data.local_folder }}"
            user: "{{ user }}"
            group: "{{ user }}"

          # - path: "{{ mongodb_volumes_data.local_folder }}"
          #   user: "{{ mongodb_user }}"
          #   group: "{{ mongodb_user }}"

          # - path: "{{ elastic_config_dir }}"
          #   user: "{{ user }}"
          #   group: "{{ user }}"
  tags:
    - compose_file
    - datastore_compose_file

- name: Install pip dependencies
  pip:
    name: [ "influxdb", "requests", "requests" ]
    state: latest
    executable: pip3
  tags:
    - influxdb_init
    - stats_scripts

- name: Do not send rsyslog logs to telegraf
  file:
    path: "80-telegraf.conf"
    state: absent
  notify: restart rsyslog
  tags: logging_config

- name: Forward rsyslog logs
  template:
    src: "98-forwarding.conf"
    dest: "/etc/rsyslog.d/98-forwarding.conf"
    mode: 0644
  notify: restart rsyslog
  tags: logging_config

- name: Copy logging configs
  template:
    src: "{{ item }}"
    dest: "{{ root_dirs_datastore }}/{{ item }}"
    mode: 0644
  with_items:
    # - fluentd.conf
    - fluent-bit.conf
    # - promtail.yaml
    - loki-local-config.yaml
  tags:
    - logging_config
    - fluentd_config
    - promtail_config
    - loki_config

- name: Copy jsonnet vector configs
  copy:
    content: "{{ lookup('jsonnet', 'templates/vector/vector.jsonnet') }}"
    dest: "{{ root_dirs_datastore }}/vector.json"
    mode: 0644
  tags:
    - logging_config
    - vector_config
    #- vector_config_jsonnet
  # notify: restart vector service

- name: Copy vector VRL scripts
  template:
    src: "{{ item }}"
    dest: "{{ vector_volumes_scripts.local_folder }}"
    mode: 0644
  with_fileglob:
    - ../templates/vector/scripts/*
  tags:
    - logging_config
    - vector_config

# - name: Copy elastic configs
#   template:
#     src: "elastic/{{ item }}"
#     dest: "{{ elastic_config_dir }}/{{ item }}"
#     owner: "{{ user }}"
#     group: "{{ user }}"
#     mode: 0644
#   with_items:
#     - filebeat.yml
#     #- logstash.conf
#   tags:
#     - datastore_config
#     - elastic_config
#     - logging_config

- name: Copy configs
  template:
    src: "{{ item }}"
    dest: "{{ root_dirs_datastore }}/{{ item }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0644
  with_items:
    - telegraf.conf
    - influxdb.conf
    - kapacitor.conf
  tags: datastore_config

- name: Copy grafana configs
  template:
    src: "grafana.ini"
    dest: "{{ root_dirs_datastore }}/grafana.ini"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0644
  tags: grafana_config

- name: Copy docker registry configs
  template:
    src: registry_config.yml
    dest: "{{ root_dirs_datastore }}/registry_config.yml"
    owner: "{{ registry_user }}"
    group: "{{ registry_user }}"
    mode: 0644
  tags: docker_registry_config

- name: Copy prometheus configs
  template:
    src: prometheus.yml
    dest: "{{ root_dirs_datastore }}/prometheus.yml"
    owner: "{{ prometheus_user }}"
    group: "{{ user }}"
    mode: 0644
  tags: prometheus_config

- name: Clone corsairmi
  git:
    repo: 'https://github.com/notaz/corsairmi.git'
    dest: "{{ corsairmi_installation_path }}"
  when: not is_dev
  tags: corsairmi

- name: Compile corsairmi
  make:
    chdir: "{{ corsairmi_installation_path }}"
  when: not is_dev
  tags: corsairmi

- name: Copy stats scripts
  template:
    src: "{{ item }}"
    dest: "{{ root_dirs_datastore }}/{{ item }}"
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: 0755
  with_items:
    - rpi_system_stats.sh
    - psu_stats.py
  tags:
    - datastore_config
    - datastore_stats_scripts
  register: stats_scripts

- name: Copy psu stats service
  template:
    src: psu-stats.service
    dest: /etc/systemd/system/psu-stats.service
    mode: 0644
  tags:
    - datastore_config
    - datastore_stats_scripts
    - datastore_stats_services

- name: Start psu stats service
  systemd:
    name: psu-stats.service
    state: started
    daemon_reload: yes
    enabled: yes
  tags:
    - datastore_config
    - datastore_stats_scripts
    - datastore_stats_services

- name: Install packages
  apt:
    name: "{{ packages }}"
    state: latest
    update_cache: no
  vars:
    packages:
      - lm-sensors

- block:
    - include_tasks: syslog-interceptor.yml
  tags: syslog_interceptor

- block:
  - include_tasks: docker/start_stack.yml
    vars:
      dir: "{{ root_dirs_datastore }}"

  - name: Create influxdb databases
    influxdb_database:
      hostname: 127.0.0.1
      database_name: "{{ item }}"
      state: present
    loop: "{{ influxdb_dbs }}"
  tags: influxdb_init

- block:
  - include_tasks: create_self_signed_cert.yml
    vars:
      privatekey_path: "{{ registry_tls_key }}"
      csr_path: "{{ registry_tls_csr }}"
      pem_path: "{{ registry_tls_crt }}"
  tags: docker_registry_tls
