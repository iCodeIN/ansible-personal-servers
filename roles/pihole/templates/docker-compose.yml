version: '3'

#
# https://howchoo.com/g/nmrlzmq1ymn/how-to-install-docker-on-your-raspberry-pi
# https://github.com/kylemanna/docker-openvpn/blob/master/docs/docker-compose.md
# https://github.com/mr-bolle/docker-openvpn-pihole/blob/master/openvpn-install.sh
#
# IPv6:
# https://github.com/kylemanna/docker-openvpn/blob/83b939456e5432ded267b2f08309b257affa2a03/docs/ipv6.md
#
# Build OpenVPN Docker image for RPI
#
# git clone https://github.com/kylemanna/docker-openvpn.git && cd docker-openvpn
# sed -i "/FROM/s/aarch64/arm32v7/g" Dockerfile.aarch64
# sed -i "/FROM/s/latest/alpine/g" Dockerfile.aarch64
# sed -i "/FROM/s/3.5/latest/g" Dockerfile.aarch64
# docker build --no-cache -t kylemanna/openvpn -f Dockerfile.aarch64 .
# cd .. && rm -f -r docker-openvpn
#
# Setup
#
# export OVPN_DATA=`pwd`/etc-openvpn/
#
# docker network create --driver=bridge --subnet=172.110.1.0/24 --gateway=172.110.1.1 vpn-net
#
# docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -n 172.110.1.4 -u udp://vpn.realmar.net
# docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki
#
# docker run -v $OVPN_DATA:/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full pihole-vpn
# docker run -v $OVPN_DATA:/etc/openvpn --rm kylemanna/openvpn ovpn_getclient pihole-vpn > $OVPN_DATA/pihole-vpn.ovpn
#

{% import "pihole_ipam.jinja2" as pihole_ipam with context -%}
{% import "password_gen.jinja2" as gen with context -%}
{% import 'docker_volumes.jinja2' as dv with context -%}
{% import 'docker_network.jinja2' as dn with context -%}
{% import "docker_misc.jinja2" as dm with context -%}

services:
  openvpn:
    container_name: {{ openvpn.name }}
    image: kylemanna/openvpn
{% if openvpn.use_host_net == false %}
    {{ dn.map_ports([ (1194, 1194, "udp"), (1194, 1194, "tcp") ])|indent(width = 4) }}
{% endif %}
    environment:
    # VIRTUAL_PORT=${VIRTUAL_PORT_OPENVPN}
    # VIRTUAL_HOST=${VIRTUAL_HOST_OPENVPN}
    # LETSENCRYPT_HOST=${LETSENCRYPT_HOST_VPN}
    # LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    # OPENVPN_PROVIDER=${OPENVPN_PROVIDER}
    # OPENVPN_USERNAME=${OPENVPN_USERNAME}
    # OPENVPN_PASSWORD=${OPENVPN_PASSWORD}
    # LOCAL_NETWORK=192.168.0.0/24
      OPENVPN_OPTS: --inactive 3600 --ping 10 --ping-exit 60 -â€“log-driver json-file --log-opt max-size=10m
    {{ dv.volumes_section_complete([ openvpn.volumes.config ])|indent(width = 4) }}
    {{ dm.restart_policy() }}
{% if openvpn.use_host_net %}
    network_mode: host
{% else %}
    networks:
      {{ openvpn.networks.name }}:
        ipv4_address: {{ openvpn.ipv4 }}
{%   if openvpn.networks.v6.enable %}
        ipv6_address: {{ openvpn.ipv6 }}
{%   endif %}
{%   if pihole.use_host_net == false %}
      {{ pihole.networks.name }}:
{%   endif %}
{% endif %}
{% if openvpn.networks.v6.enable %}
    privileged: yes
{% endif %}
    cap_add:
      - NET_ADMIN
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  pihole:
    image: pihole/pihole:latest
    container_name: {{ pihole.name }}
    dns:
      - 127.0.0.1
      - 1.1.1.1
      - 1.0.0.1
    depends_on:
      - openvpn
{% if pihole.use_host_net == false %}
    {{ dn.map_ports([
      (53, 53, "udp"), (53, 53, "tcp"),
      (67, 67, "udp"),
      (80, 80),
      (443, 443) ])|indent(width = 4) }}
{% endif %}
    environment:
{#                 We need to escape $-sign with two $$-signs #}
      WEBPASSWORD: '{{ gen.pw("web") | replace("$", "$$") }}'
      TZ: {{ timezone }}
      DNS1: {{ unbound.ipv4 }}#53
      DNS2: "no"
      ServerIP: {{ pihole_ipam.ipam.ipv4 }}
{% if host.supports_v6 %}
{%   if pihole.use_host_net %}
      IPv6: "True"
      ServerIPv6: {{ host.ipv6 }}
{%   elif pihole.networks.v6.enable %}
      IPv6: "True"
      ServerIPv6: {{ pihole_ipam.ipam.ipv6 }}
{%   endif %}
{% endif %}
      DNSMASQ_LISTENING: all
      DNSMASQ_USER: {{ pihole.user }}
    {{ dv.volumes_section_complete(
      [
        pihole.volumes.main ,
        pihole.volumes.dnsmasq
      ]
    )|indent(width = 4) }}
    {{ dm.restart_policy() }}
{% if pihole.use_host_net %}
    network_mode: host
{% else %}
    networks:
      {{ pihole.networks.name }}:
        ipv4_address: {{ pihole_ipam.ipam.ipv4 }}
{%      if pihole.networks.v6.enable %}
        ipv6_address: {{ pihole_ipam.ipam.ipv6 }}
{%      endif %}
      {{ unbound.networks.name }}:
{% endif %}
    cap_add:
      - CAP_NET_BIND_SERVICE
      - CAP_NET_RAW
      - NET_ADMIN
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"

  unbound:
    container_name: {{ unbound.name }}
    # Note: make sure the image supports arm (the image on the latest tag does not)
    image: {{ 'mvance/unbound-rpi:latest' if not is_dev else 'mvance/unbound:latest' }}
{% set vols = [
  unbound.volumes.main
] %}
    {{ dv.volumes_mapping_full(vols)|indent }}
    networks:
      {{ unbound.networks.name }}:
        ipv4_address: {{ unbound.ipv4 }}
    {{ dm.restart_policy() }}
{% set nets = [ unbound.networks ] %}
{% if pihole.use_host_net == false %}
{{   nets.append(pihole.networks) }}
{% endif %}
{% if openvpn.use_host_net == false %}
{{   nets.append(openvpn.networks) }}
{% endif %}
# docker network create --ipv6 --driver=bridge --subnet=172.16.0.1/24 --gateway=172.16.0.1 --subnet=2002:ac10:0001::/64 --gateway=2002:ac10:0001::1 vpn-net
{{ dn.networks_declaration(nets) }}

{% set vols = [
  pihole.volumes.main,
  pihole.volumes.dnsmasq,
  openvpn.volumes.config,
  unbound.volumes.main
] %}
{{ dv.volumes_declaration(vols) }}
