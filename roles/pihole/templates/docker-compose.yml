version: '3'

{% import 'docker/volumes.jinja2' as dv with context -%}
{% import 'docker/network.jinja2' as dn with context -%}
{% import 'docker/misc.jinja2' as dm with context -%}

{% set pihole_vols = [ pihole_volumes_main, pihole_volumes_dnsmasq ] %}
{% set unbound_vols = [ unbound_volumes_main ] %}

{% set vols = pihole_vols + unbound_vols %}

{% set nets = [
  discovery_network,
  datastore_network,
  unbound_networks,
  pihole_networks
] %}

services:
  pihole:
    image: pihole/pihole:latest
    container_name: {{ pihole_name }}
    entrypoint: {{ pihole_volumes_main.mount }}startup.sh
    {{ lookup('traefik',
      { 'service_name': 'pihole', 'port': pihole_web_admin_port, 'use_internal': True },
      { 'service_name': 'pihole', 'protocol': 'tcp', 'port': 53, 'entrypoints': [ 'dns_tcp' ] },
      { 'service_name': 'pihole', 'protocol': 'udp', 'port': 53, 'entrypoints': [ 'dns_udp' ] })|indent(width = 4) }}
    dns:
      - 127.0.0.1
      - 1.1.1.1
      - 1.0.0.1
    environment:
      WEBPASSWORD: '{{ pihole_web_password | pw }}'
      TZ: {{ timezone }}
      DNS1: {{ unbound_ipv4 }}#53
      DNS2: "no"
      WEB_PORT: {{ pihole_web_admin_port }}
{% if host_supports_v6 and pihole_networks.v6.enable %}
      IPv6: "True"
      ServerIPv6: {{ pihole_ipv6 }}
{% endif %}
      DNSMASQ_LISTENING: all
      DNSMASQ_USER: {{ pihole_dnsmasq_user }}
    {{ dv.volumes_section_complete(pihole_vols)|indent(width = 4) }}
    networks:
      {{ network_names_datastore }}:
      {{ network_names_discovery }}:
      {{ pihole_networks.name }}:
        ipv4_address: {{ pihole_ipv4 }}
{%      if pihole_networks.v6.enable %}
        ipv6_address: {{ pihole_ipv6 }}
{%      endif %}
      {{ unbound_networks.name }}:
    cap_add:
      # Allows FTLDNS binding to TCP/UDP sockets below 1024 (specifically DNS service on port 53)
      - CAP_NET_BIND_SERVICE
{% if host_supports_v6 %}
      # use raw and packet sockets (needed for handling DHCPv6 requests, and verifying that an IP is not in use before leasing it)
      - CAP_NET_RAW
{% endif %}
      # modify routing tables and other network-related operations (in particular inserting an entry in the neighbor table to answer DHCP requests using unicast packets)
      - CAP_NET_ADMIN
      # Needed for DHCP and IPv6 RA
      - NET_ADMIN
      # https://github.com/pi-hole/docker-pi-hole/issues/734
      - CAP_SYS_PTRACE
    {{ dm.common()|indent(width = 4) }}
    depends_on:
      - dhcphelper

  # https://github.com/eko/pihole-exporter
  # https://grafana.com/grafana/dashboards/10176
  {{ dm.service('prometheus_exporter', 'ekofr/pihole-exporter:latest')|indent(width = 2) }}
    container_name: {{ pihole_prometheus_exporter_container_name }}
    environment:
      PIHOLE_HOSTNAME: {{ pihole_ipv4 }}
      PORT: {{ pihole_prometheus_exporter_port }}
      INTERVAL: 30s
    networks:
      {{ network_names_datastore }}:
      {{ pihole_networks.name }}:

  # https://docs.pi-hole.net/docker/dhcp/
  # https://discourse.pi-hole.net/t/dhcp-with-docker-compose-and-bridge-networking/17038
  dhcphelper:
    image: {{ dm.private_image('dhcphelper') }}
    network_mode: host
    command: -s {{ pihole_ipv4 }}
    cap_add:
      - NET_ADMIN
    {{ dm.disable_auto_update_section()|indent(width = 4) }}
    {{ dm.common()|indent(width = 4) }}

  unbound:
    container_name: {{ unbound_name }}
    # Note: make sure the image supports arm (the image on the latest tag does not)
    image: {{ dm.autoarch('mvance/unbound:latest', 'mvance/unbound-rpi:latest') }}
    {{ dv.volumes_mapping_full(unbound_vols)|indent }}
    networks:
      {{ unbound_networks.name }}:
        ipv4_address: {{ unbound_ipv4 }}
      {{ network_names_datastore }}:
    {{ dm.common()|indent(width = 4) }}

{{ dn.networks_declaration(nets) }}

{{ dv.volumes_declaration(vols) }}
